#region License

/*
 * Copyright 2002-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF Any KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#endregion

using System;
using System.Collections.Generic;
using Spring.Integration.Core;
using Spring.Util;

namespace Spring.Integration.Message {

    /// <summary>
    /// Base Message class defining common properties such as id, payload, and headers.
    /// </summary>
    /// <author>Mark Fisher</author>
    /// <author>Andreas Dï¿½hring (.NET)</author>
    [Serializable]
    public class Message : IMessage { 

        private readonly object _payload;

        private readonly MessageHeaders _headers;

        /// <summary>
        /// Create a new message with the given payload. The id will be generated by
        /// the default {@link IdGenerator} strategy.
        /// </summary>
        /// <param name="payload">the message payload</param>
        public Message(object payload)
            : this(payload, null) {
        }

        /// <summary>
        /// Create a new message with the given payload. The id will be generated by
        /// the default {@link IdGenerator} strategy. The headers will be populated
        /// with the provided header values.
        /// </summary>
        /// <param name="headers">message headers</param>
        /// <param name="payload">the message payload</param>
        public Message(object payload, IDictionary<string, object> headers) {
            AssertUtils.ArgumentNotNull(payload, "payload must not be null");

            if(headers == null) {
                headers = new Dictionary<string, object>();
            }

            _headers = new MessageHeaders(headers);
            _payload = payload;
        }

        #region IMessage Members

        public MessageHeaders Headers {
            get { return _headers; }
        }

        public object Payload {
            get { return _payload; }
        }

        #endregion

        #region object overrides

        public override string ToString() {
            return "[Payload=" + _payload + "][Headers=" + _headers + "]";
        }
        
        #endregion
    }
}
